
<body>
       
        <!-- <%- include("../partials/admin/header") %> -->

    <div class="edit-offer-container">
        <div class="edit-offer-header">
            <h1>Edit Offer</h1>
            <p class="subtitle">Update offer details</p>
        </div>

        <div class="edit-offer-card">
            <form id="editOfferForm">
                <input type="hidden" id="offerId" value="<%= offer._id %>">
                
                <div class="form-grid">
                    <!-- Offer Name -->
                    <div class="form-group">
                        <label for="offerName" class="form-label">
                            Offer Name <span class="required">*</span>
                        </label>
                        <input 
                            type="text" 
                            id="offerName" 
                            name="offerName" 
                            class="form-input" 
                            placeholder="e.g., Summer Sale"
                            value="<%= offer.offerName %>"
                            required
                        >
                        <span class="error-message" id="offerNameError"></span>
                    </div>

                    <!-- Discount Percentage -->
                    <div class="form-group">
                        <label for="discount" class="form-label">
                            Discount Percentage <span class="required">*</span>
                        </label>
                        <div class="input-with-icon">
                            <span class="input-icon">%</span>
                            <input 
                                type="number" 
                                id="discount" 
                                name="discount" 
                                class="form-input with-icon" 
                                placeholder="Enter percentage (1-100)"
                                min="1"
                                max="100"
                                step="0.01"
                                value="<%= offer.discount %>"
                                required
                            >
                        </div>
                        <span class="error-message" id="discountError"></span>
                    </div>

                    <!-- Offer Type -->
                    <div class="form-group">
                        <label for="offerType" class="form-label">
                            Offer Type <span class="required">*</span>
                        </label>
                        <select id="offerType" name="offerType" class="form-select" required>
                            <option value="">Select Offer Type</option>
                            <option value="category" <%= offer.offerType === 'category' ? 'selected' : '' %>>Category</option>
                            <option value="product" <%= offer.offerType === 'product' ? 'selected' : '' %>>Product</option>
                        </select>
                        <span class="error-message" id="offerTypeError"></span>
                    </div>

                    <!-- Select Categories -->
                    <div class="form-group" id="categoryGroup" style="display: <%= offer.offerType === 'category' ? 'block' : 'none' %>;">
                        <label for="categories" class="form-label">
                            Select Categories <span class="required">*</span>
                        </label>
                        <select id="categories" name="categoryId" class="form-select" multiple size="5">
                            <% if (categories && categories.length > 0) { %>
                                <% categories.forEach(category => { %>
                                    <% if (category.isActive) { %>
                                        <% 
                                            const isSelected = offer.categoryId && offer.categoryId.some(
                                                cat => cat._id ? cat._id.toString() === category._id.toString() : cat.toString() === category._id.toString()
                                            );
                                        %>
                                        <option value="<%= category._id %>" <%= isSelected ? 'selected' : '' %>>
                                            <%= category.name %>
                                        </option>
                                    <% } %>
                                <% }); %>
                            <% } else { %>
                                <option disabled>No categories available</option>
                            <% } %>
                        </select>
                        <small class="form-hint">Hold Ctrl (Cmd on Mac) to select multiple categories</small>
                        <span class="error-message" id="categoriesError"></span>
                    </div>

                    <!-- Select Products -->
                    <div class="form-group" id="productGroup" style="display: <%= offer.offerType === 'product' ? 'block' : 'none' %>;">
                        <label for="products" class="form-label">
                            Select Products <span class="required">*</span>
                        </label>
                        <select id="products" name="productId" class="form-select" multiple size="5">
                            <% if (products && products.length > 0) { %>
                                <% products.forEach(product => { %>
                                    <% if (!product.isBlocked && product.status === 'Available') { %>
                                        <% 
                                            const isSelected = offer.productId && offer.productId.some(
                                                prod => prod._id ? prod._id.toString() === product._id.toString() : prod.toString() === product._id.toString()
                                            );
                                        %>
                                        <option value="<%= product._id %>" <%= isSelected ? 'selected' : '' %>>
                                            <%= product.productName %>
                                        </option>
                                    <% } %>
                                <% }); %>
                            <% } else { %>
                                <option disabled>No products available</option>
                            <% } %>
                        </select>
                        <small class="form-hint">Hold Ctrl (Cmd on Mac) to select multiple products</small>
                        <span class="error-message" id="productsError"></span>
                    </div>

                    <!-- Start Date -->
                    <div class="form-group">
                        <label for="startDate" class="form-label">
                            Start Date <span class="required">*</span>
                        </label>
                        <input 
                            type="date" 
                            id="startDate" 
                            name="startDate" 
                            class="form-input"
                            value="<%= new Date(offer.startDate).toISOString().split('T')[0] %>"
                            required
                        >
                        <span class="error-message" id="startDateError"></span>
                    </div>

                    <!-- End Date -->
                    <div class="form-group">
                        <label for="endDate" class="form-label">
                            End Date <span class="required">*</span>
                        </label>
                        <input 
                            type="date" 
                            id="endDate" 
                            name="endDate" 
                            class="form-input"
                            value="<%= new Date(offer.endDate).toISOString().split('T')[0] %>"
                            required
                        >
                        <span class="error-message" id="endDateError"></span>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="button" class="btn btn-cancel" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn btn-save">Update Offer</button>
                </div>
            </form>
        </div>
    </div>

    <script> 
       
       document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('editOfferForm');
    const offerTypeSelect = document.getElementById('offerType');
    const categoryGroup = document.getElementById('categoryGroup');
    const productGroup = document.getElementById('productGroup');
    const categoriesSelect = document.getElementById('categories');
    const productsSelect = document.getElementById('products');
    const cancelBtn = document.getElementById('cancelBtn');
    const startDateInput = document.getElementById('startDate');
    const endDateInput = document.getElementById('endDate');
    const offerId = document.getElementById('offerId').value;

    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    startDateInput.setAttribute('min', today);
    endDateInput.setAttribute('min', today);

    // Store initial selections
    const initialOfferType = offerTypeSelect.value;

    // Handle offer type change
    offerTypeSelect.addEventListener('change', function() {
        const selectedType = this.value;
        
        // Hide both groups initially
        categoryGroup.style.display = 'none';
        productGroup.style.display = 'none';
        
        // Clear errors
        clearError('categories');
        clearError('products');
        clearError('offerType');
        
        // Show relevant group
        if (selectedType === 'category') {
            categoryGroup.style.display = 'block';
            categoriesSelect.required = true;
            productsSelect.required = false;
            
            // Clear product selections if switching from product to category
            if (initialOfferType !== 'category') {
                productsSelect.selectedIndex = -1;
            }
        } else if (selectedType === 'product') {
            productGroup.style.display = 'block';
            productsSelect.required = true;
            categoriesSelect.required = false;
            
            // Clear category selections if switching from category to product
            if (initialOfferType !== 'product') {
                categoriesSelect.selectedIndex = -1;
            }
        }
    });

    // Update end date minimum when start date changes
    startDateInput.addEventListener('change', function() {
        const startDate = this.value;
        if (startDate) {
            endDateInput.setAttribute('min', startDate);
            
            // If end date is before start date, clear it
            if (endDateInput.value && endDateInput.value < startDate) {
                endDateInput.value = '';
            }
        }
        clearError('startDate');
    });

    endDateInput.addEventListener('change', function() {
        clearError('endDate');
    });

    // Form validation
    function validateForm() {
        let isValid = true;

        // Clear all errors
        clearAllErrors();

        // Offer Name validation
        const offerName = document.getElementById('offerName').value.trim();
        if (!offerName) {
            showError('offerName', 'Offer name is required');
            isValid = false;
        } else if (offerName.length < 3) {
            showError('offerName', 'Offer name must be at least 3 characters');
            isValid = false;
        }

        // Discount validation
        const discount = parseFloat(document.getElementById('discount').value);
        if (!document.getElementById('discount').value || isNaN(discount)) {
            showError('discount', 'Discount percentage is required');
            isValid = false;
        } else if (discount < 1 || discount > 100) {
            showError('discount', 'Discount must be between 1% and 100%');
            isValid = false;
        }

        // Offer Type validation
        const offerType = offerTypeSelect.value;
        if (!offerType) {
            showError('offerType', 'Please select an offer type');
            isValid = false;
        }

        // Category/Product validation based on offer type
        if (offerType === 'category') {
            const selectedCategories = Array.from(categoriesSelect.selectedOptions).map(opt => opt.value);
            if (selectedCategories.length === 0) {
                showError('categories', 'Please select at least one category');
                isValid = false;
            }
        } else if (offerType === 'product') {
            const selectedProducts = Array.from(productsSelect.selectedOptions).map(opt => opt.value);
            if (selectedProducts.length === 0) {
                showError('products', 'Please select at least one product');
                isValid = false;
            }
        }

        // Start Date validation
        const startDate = startDateInput.value;
        if (!startDate) {
            showError('startDate', 'Start date is required');
            isValid = false;
        } else {
            const startDateObj = new Date(startDate);
            const todayDate = new Date();
            todayDate.setHours(0, 0, 0, 0);
            
            if (startDateObj < todayDate) {
                showError('startDate', 'Start date must be today or in the future');
                isValid = false;
            }
        }

        // End Date validation
        const endDate = endDateInput.value;
        if (!endDate) {
            showError('endDate', 'End date is required');
            isValid = false;
        } else if (startDate && endDate) {
            const startDateObj = new Date(startDate);
            const endDateObj = new Date(endDate);
            
            if (endDateObj < startDateObj) {
                showError('endDate', 'End date must be after start date');
                isValid = false;
            }
            
            if (endDateObj.getTime() === startDateObj.getTime()) {
                showError('endDate', 'End date must be different from start date');
                isValid = false;
            }
        }

        return isValid;
    }

    function showError(fieldId, message) {
        const errorElement = document.getElementById(fieldId + 'Error');
        const inputElement = document.getElementById(fieldId);
        
        if (errorElement) {
            errorElement.textContent = message;
        }
        
        if (inputElement) {
            inputElement.style.borderColor = '#e74c3c';
        }
    }

    function clearError(fieldId) {
        const errorElement = document.getElementById(fieldId + 'Error');
        const inputElement = document.getElementById(fieldId);
        
        if (errorElement) {
            errorElement.textContent = '';
        }
        
        if (inputElement) {
            inputElement.style.borderColor = '#dfe6e9';
        }
    }

    function clearAllErrors() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => {
            element.textContent = '';
        });

        const inputs = document.querySelectorAll('.form-input, .form-select, .form-textarea');
        inputs.forEach(input => {
            input.style.borderColor = '#dfe6e9';
        });
    }

    // Real-time validation
    const inputs = ['offerName', 'discount', 'offerType', 'startDate', 'endDate'];
    inputs.forEach(inputId => {
        const element = document.getElementById(inputId);
        if (element) {
            element.addEventListener('input', function() {
                clearError(inputId);
            });
            element.addEventListener('change', function() {
                clearError(inputId);
            });
        }
    });

    // Clear errors on selection change
    categoriesSelect.addEventListener('change', function() {
        clearError('categories');
    });

    productsSelect.addEventListener('change', function() {
        clearError('products');
    });

    // Form submission
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        if (!validateForm()) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please fix all errors before submitting',
                confirmButtonColor: '#e74c3c'
            });
            return;
        }

        // Prepare form data
        const offerType = offerTypeSelect.value;
        const formData = {
            offerName: document.getElementById('offerName').value.trim(),
            discount: parseFloat(document.getElementById('discount').value),
            offerType: offerType,
            startDate: startDateInput.value,
            endDate: endDateInput.value
        };

        // Add category or product IDs based on offer type
        if (offerType === 'category') {
            formData.categoryId = Array.from(categoriesSelect.selectedOptions).map(opt => opt.value);
        } else if (offerType === 'product') {
            formData.productId = Array.from(productsSelect.selectedOptions).map(opt => opt.value);
        }

        // Disable submit button
        const submitBtn = form.querySelector('.btn-save');
        submitBtn.disabled = true;
        submitBtn.textContent = 'Updating...';

        try {
            const response = await fetch(`/admin/offers/editOffer/${offerId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (response.ok) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Offer updated successfully',
                    confirmButtonColor: '#27ae60'
                }).then(() => {
                    window.location.href = '/admin/offers';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to update offer',
                    confirmButtonColor: '#e74c3c'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'An error occurred while updating the offer',
                confirmButtonColor: '#e74c3c'
            });
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Update Offer';
        }
    });

    // Cancel button
    cancelBtn.addEventListener('click', function() {
        Swal.fire({
            title: 'Are you sure?',
            text: 'All unsaved changes will be lost',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e74c3c',
            cancelButtonColor: '#95a5a6',
            confirmButtonText: 'Yes, discard changes',
            cancelButtonText: 'Continue editing'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/admin/offers';
            }
        });
    });
});

    </script>
</body>
</html>