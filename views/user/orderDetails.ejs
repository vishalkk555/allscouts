<%- include("../partials/user/header") %>

<style>
    /* Page Layout */
    .profile-container {
        display: flex;
        min-height: 100vh;
        background-color: #f8f9fa;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Sidebar Styles */
    .change-password-sidebar {
        width: 280px;
        background: white;
        padding: 30px 0;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        position: fixed;
        height: 100vh;
        overflow-y: auto;
    }

    .change-password-sidebar-menu {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .change-password-sidebar-menu li {
        margin-bottom: 2px;
    }

    .change-password-sidebar-menu a {
        display: block;
        padding: 15px 30px;
        color: #6c757d;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s;
        border-left: 4px solid transparent;
    }

    .change-password-sidebar-menu a:hover,
    .change-password-sidebar-menu a.change-password-active {
        background-color: #fff5f5;
        color: #e74c3c;
        border-left-color: #e74c3c;
    }

    .change-password-logout-section {
        position: absolute;
        bottom: 30px;
        left: 30px;
        right: 30px;
    }

    .change-password-logout-btn {
        width: 100%;
        padding: 12px;
        background-color: #e74c3c;
        color: white;
        border: none;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .change-password-logout-btn:hover {
        background-color: #c0392b;
    }

    /* Main Content */
    .order-details-content {
        margin-left: 280px;
        padding: 30px;
        width: calc(100% - 280px);
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    /* Order Header */
    .order-header {
        background: white;
        padding: 25px 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 25px;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .order-title-section h1 {
        font-size: 28px;
        font-weight: 600;
        color: #333;
        margin: 0 0 8px 0;
    }

    .order-date {
        color: #6c757d;
        font-size: 14px;
        margin: 0;
    }

    .order-status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .status-shipped {
        background-color: #cce5ff;
        color: #0056b3;
    }

    .status-delivered {
        background-color: #d4edda;
        color: #155724;
    }

    .status-cancelled {
        background-color: #f8d7da;
        color: #721c24;
    }

    .status-returned {
        background-color: #e2e3e5;
        color: #383d41;
    }

    /* Info Cards Grid */
    .order-info-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 25px;
        margin-bottom: 30px;
    }

    .info-card {
        background: white;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .info-card h3 {
        font-size: 16px;
        font-weight: 600;
        color: #333;
        margin: 0 0 18px 0;
        padding-bottom: 12px;
        border-bottom: 1px solid #f1f3f4;
    }

    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 12px;
        font-size: 14px;
    }

    .info-row:last-child {
        margin-bottom: 0;
    }

    .info-label {
        color: #6c757d;
        font-weight: 500;
    }

    .info-value {
        color: #333;
        font-weight: 600;
    }

    .payment-status {
        font-size: 12px;
        font-weight: 500;
        padding: 4px 8px;
        border-radius: 4px;
    }

    .payment-paid {
        background-color: #d4edda;
        color: #155724;
    }

    .payment-pending {
        background-color: #fff3cd;
        color: #856404;
    }

    .payment-refunded {
        background-color: #f8d7da;
        color: #721c24;
    }

    /* Order Progress Timeline */
    .order-progress {
        background: white;
        padding: 25px 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .progress-timeline {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        margin-top: 20px;
    }

    .progress-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        z-index: 2;
    }

    .progress-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        font-size: 14px;
        margin-bottom: 8px;
        border: 3px solid #dee2e6;
        background: white;
        color: #6c757d;
    }

    .progress-circle.active {
        background: #28a745;
        color: white;
        border-color: #28a745;
    }

    .progress-circle.current {
        background: #007bff;
        color: white;
        border-color: #007bff;
    }

    .progress-label {
        font-size: 12px;
        font-weight: 500;
        color: #6c757d;
        text-align: center;
    }

    .progress-line {
        position: absolute;
        top: 20px;
        left: 0;
        right: 0;
        height: 3px;
        background: #dee2e6;
        z-index: 1;
    }

    .progress-line-fill {
        height: 100%;
        background: #28a745;
        transition: width 0.3s ease;
    }

    /* Order Items Section */
    .order-items-section {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 20px;
    }

    .items-header {
        padding: 20px 25px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .items-header h3 {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        margin: 0;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .items-table th {
        background-color: #f8f9fa;
        padding: 15px 12px;
        text-align: left;
        font-weight: 600;
        color: #495057;
        border-bottom: 1px solid #dee2e6;
        font-size: 14px;
    }

    .items-table td {
        padding: 20px 12px;
        border-bottom: 1px solid #f1f3f4;
        vertical-align: middle;
        font-size: 14px;
    }

    .product-info {
        display: flex;
        align-items: center;
        gap: 15px;
        min-width: 250px;
    }

    .product-image {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 6px;
        border: 1px solid #dee2e6;
    }

    .product-details h4 {
        font-size: 14px;
        font-weight: 600;
        color: #333;
        margin: 0 0 4px 0;
        line-height: 1.3;
    }

    .product-size {
        color: #6c757d;
        font-size: 12px;
        margin: 0;
    }

    .price-amount {
        font-weight: 600;
        color: #28a745;
    }

    .quantity-display {
        text-align: center;
        font-weight: 500;
    }

    .item-status {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 10px;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
    }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .btn-return, .btn-cancel-item {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 80px;
    }

    .btn-return {
        background-color: #ffc107;
        color: #212529;
    }

    .btn-return:hover:not(:disabled) {
        background-color: #e0a800;
    }

    .btn-cancel-item {
        background-color: #dc3545;
        color: white;
    }

    .btn-cancel-item:hover:not(:disabled) {
        background-color: #c82333;
    }

    .btn-return:disabled, .btn-cancel-item:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
        opacity: 0.6;
    }

    /* Order Summary */
    .order-summary-section {
        background: white;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 25px;
    }

    .summary-grid {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 40px;
    }

    .summary-details {
        max-width: 300px;
        margin-left: auto;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 12px;
        font-size: 14px;
    }

    .summary-row.total {
        border-top: 2px solid #dee2e6;
        padding-top: 12px;
        margin-top: 12px;
        font-weight: 600;
        font-size: 16px;
    }

    .summary-label {
        color: #6c757d;
    }

    .summary-value {
        font-weight: 600;
        color: #333;
    }

    .summary-value.total {
        color: #28a745;
    }

    /* Action Buttons */
    .action-buttons-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .back-link {
        color: #e74c3c;
        text-decoration: none;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: opacity 0.2s;
    }

    .back-link:hover {
        opacity: 0.8;
        text-decoration: none;
    }

    .action-buttons-right {
        display: flex;
        gap: 15px;
    }

    .btn-primary, .btn-danger {
        padding: 12px 24px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .btn-danger:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    /* Mobile Responsiveness */
    @media (max-width: 768px) {
        .change-password-sidebar {
            transform: translateX(-100%);
        }

        .order-details-content {
            margin-left: 0;
            width: 100%;
            padding: 15px;
        }

        .order-header {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

        .order-info-grid {
            grid-template-columns: 1fr;
        }

        .progress-timeline {
            flex-direction: column;
            gap: 20px;
        }

        .progress-line {
            display: none;
        }

        .items-table {
            font-size: 12px;
        }

        .items-table th,
        .items-table td {
            padding: 10px 8px;
        }

        .product-info {
            flex-direction: column;
            min-width: auto;
        }

        .action-buttons-section {
            flex-direction: column;
            gap: 20px;
            align-items: stretch;
        }

        .action-buttons-right {
            justify-content: center;
        }
    }

    /* Return Modal Styles */
    .return-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .return-modal-content {
        background: white;
        padding: 30px;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

    .return-modal h3 {
        margin: 0 0 20px 0;
        color: #333;
    }

    .return-reasons {
        margin: 20px 0;
    }

    .return-reason {
        display: block;
        margin-bottom: 10px;
    }

    .return-reason input[type="radio"] {
        margin-right: 8px;
    }

    .return-modal-buttons {
        display: flex;
        gap: 15px;
        justify-content: flex-end;
        margin-top: 25px;
    }
</style>

<div class="profile-container">
    <!-- Sidebar -->
    <aside class="change-password-sidebar">
        <ul class="change-password-sidebar-menu">
            <li><a href="/profile">Profile</a></li>
            <li><a href="/orders" class="change-password-active">Orders</a></li>
            <li><a href="/addresses">Addresses</a></li>
            <li><a href="/wallet">Wallet</a></li>
            <li><a href="/change-password">Change Password</a></li>
        </ul>
        <div class="change-password-logout-section">
            <button class="change-password-logout-btn" onclick="logout()">Logout</button>
        </div>
    </aside>

    <!-- Main Content -->
    <div class="order-details-content">
        <!-- Order Header -->
        <div class="order-header">
            <div class="order-title-section">
                <h1>Order #<%= order.orderNumber || order._id.toString().slice(-8).toUpperCase() %></h1>
                <p class="order-date">Placed on <%= new Date(order.createdAt).toLocaleDateString('en-IN', { 
                    day: '2-digit', 
                    month: 'long', 
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                }) %></p>
            </div>
            <div class="order-status-badge status-<%= order.orderStatus.toLowerCase() %>">
                <%= order.orderStatus %>
            </div>
        </div>

        <!-- Order Info Grid -->
        <div class="order-info-grid">
            <!-- Shipping Information -->
            <div class="info-card">
                <h3>Shipping Information</h3>
                <% if (order.deliveryAddress) { %>
                <div class="info-row">
                    <span class="info-label">Name:</span>
                    <span class="info-value"><%= order.deliveryAddress.firstName %> <%= order.deliveryAddress.lastName %></span>
                </div>
                <% if (order.deliveryAddress.phone) { %>
                <div class="info-row">
                    <span class="info-label">Phone:</span>
                    <span class="info-value"><%= order.deliveryAddress.phone %></span>
                </div>
                <% } %>
                <div class="info-row">
                    <span class="info-label">Address:</span>
                    <span class="info-value">
                        <%= order.deliveryAddress.street %>, <%= order.deliveryAddress.city %>, <%= order.deliveryAddress.state %> - <%= order.deliveryAddress.zipCode %>
                    </span>
                </div>
                <% } else { %>
                <p>No shipping address available</p>
                <% } %>
            </div>

            <!-- Payment Information -->
            <div class="info-card">
                <h3>Payment Information</h3>
                <div class="info-row">
                    <span class="info-label">Payment Method:</span>
                    <span class="info-value"><%= order.paymentMethod %></span>
                </div>
                <div class="info-row">
                    <span class="info-label">Payment Status:</span>
                    <span class="payment-status payment-<%= order.paymentStatus.toLowerCase() %>">
                        <%= order.paymentStatus %>
                    </span>
                </div>
                <div class="info-row">
                    <span class="info-label">Currency:</span>
                    <span class="info-value">INR</span>
                </div>
            </div>

            <!-- Order Information -->
            <div class="info-card">
                <h3>Order Information</h3>
                <div class="info-row">
                    <span class="info-label">Order Date:</span>
                    <span class="info-value"><%= new Date(order.createdAt).toLocaleDateString('en-IN') %></span>
                </div>
                <% if (order.deliveryDate) { %>
                <div class="info-row">
                    <span class="info-label">Expected Delivery:</span>
                    <span class="info-value"><%= new Date(order.deliveryDate).toLocaleDateString('en-IN') %></span>
                </div>
                <% } %>
                <% if (order.shippingDate) { %>
                <div class="info-row">
                    <span class="info-label">Shipped Date:</span>
                    <span class="info-value"><%= new Date(order.shippingDate).toLocaleDateString('en-IN') %></span>
                </div>
                <% } %>
                <div class="info-row">
                    <span class="info-label">Total Amount:</span>
                    <span class="info-value price-amount">₹<%= order.orderAmount.toFixed(2) %></span>
                </div>
            </div>
        </div>

        <!-- Order Progress Timeline -->
        <div class="order-progress">
            <h3 style="margin: 0 0 20px 0; color: #333;">Order Progress</h3>
            <div class="progress-timeline">
                <div class="progress-line">
                    <div class="progress-line-fill" style="width: <%= 
                        order.orderStatus === 'Pending' ? '0%' :
                        order.orderStatus === 'Shipped' ? '50%' :
                        order.orderStatus === 'Delivered' ? '100%' :
                        order.orderStatus === 'Cancelled' ? '0%' : '25%'
                    %>;"></div>
                </div>
                <div class="progress-step">
                    <div class="progress-circle <%= order.orderStatus !== 'Cancelled' ? 'active' : '' %>">1</div>
                    <div class="progress-label">Order Placed</div>
                </div>
                <div class="progress-step">
                    <div class="progress-circle <%= ['Shipped', 'Delivered'].includes(order.orderStatus) ? 'active' : 
                        order.orderStatus === 'Shipped' ? 'current' : '' %>">2</div>
                    <div class="progress-label">Shipped</div>
                </div>
                <div class="progress-step">
                    <div class="progress-circle <%= order.orderStatus === 'Delivered' ? 'active' : 
                        order.orderStatus === 'Delivered' ? 'current' : '' %>">3</div>
                    <div class="progress-label">Delivered</div>
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="order-items-section">
            <div class="items-header">
                <h3>Order Items</h3>
            </div>
            <table class="items-table">
                <thead>
                    <tr>
                        <th>Product</th>
                        
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Status</th>
                        <th>Return</th>
                        <th>Cancel</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <% order.orderedItem.forEach(function(item, index) { %>
                    <tr id="item-row-<%= index %>">
                        <td>
                            <div class="product-info">
                                <% if (item.productId && item.productId.productImage && item.productId.productImage.length > 0) { %>
                                <img src="<%= item.productId.productImage[0] %>" alt="Product" class="product-image">
                                <% } else { %>
                                <div class="product-image" style="background-color: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #6c757d; font-size: 10px;">No Image</div>
                                <% } %>
                                <div class="product-details">
                                    <h4><%= item.productId ? item.productId.productName : 'Product not found' %></h4>
                                    <p class="product-size">Size: <%= item.size %></p>
                                </div>
                            </div>
                        </td>
                        
                        <td><span class="price-amount">₹<%= item.productPrice.toFixed(2) %></span></td>
                        <td><span class="quantity-display"><%= item.quantity %></span></td>
                        <td>
                            <span class="item-status status-<%= item.productStatus.toLowerCase() %>" id="item-status-<%= index %>">
                                <%= item.productStatus %>
                            </span>
                        </td>
                        <td>
                            <button class="btn-return" 
                                    id="return-btn-<%= index %>"
                                    <%= item.productStatus !== 'Delivered' ? 'disabled' : '' %>
                                    onclick="openReturnModal('<%= item.productId._id %>', '<%= index %>')">
                                Return Order
                            </button>
                        </td>
                        <td>
                            <button class="btn-cancel-item" 
                                    id="cancel-btn-<%= index %>"
                                    <%= ['Delivered', 'Cancelled', 'Returned'].includes(item.productStatus) ? 'disabled' : '' %>
                                    onclick="cancelItem('<%= item.productId._id %>', '<%= index %>')">
                                Cancel Item
                            </button>
                        </td>
                        <td><span class="price-amount">₹<%= item.totalProductPrice.toFixed(2) %></span></td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>

        <!-- Order Summary -->
        <div class="order-summary-section">
            <div class="summary-grid">
                <div></div> <!-- Empty div for spacing -->
                <div class="summary-details">
                    <% 
                    let subtotal = order.orderedItem.reduce((sum, item) => sum + item.totalProductPrice, 0);
                    let discount = order.couponDiscount || 0;
                    %>
                    <div class="summary-row">
                        <span class="summary-label">Subtotal:</span>
                        <span class="summary-value">₹<%= subtotal.toFixed(2) %></span>
                    </div>
                    <% if (discount > 0) { %>
                    <div class="summary-row">
                        <span class="summary-label">Discount:</span>
                        <span class="summary-value" style="color: #28a745;">-₹<%= discount.toFixed(2) %></span>
                    </div>
                    <% } %> 

                    <div class="summary-row">
                        <span class = "summary-label">Shipping </span>
                        <span class = "summary-value" style="color: #28a745;">₹100</span>"
                    </div>
                    
                    <div class="summary-row total">
                        <span class="summary-label">Grand Total:</span>
                        <span class="summary-value total">₹<%= order.orderAmount.toFixed(2) %></span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons-section">
                <a href="/orders" class="back-link">← Back to Orders</a>
              <div class="action-buttons-right">
    <button class="btn-danger" 
            id="cancel-order-btn"
            <%= ['Cancelled', 'Delivered', 'Shipped'].includes(order.orderStatus) ? 'disabled' : '' %>
            onclick="cancelEntireOrder('<%= order._id %>')">
        <%= order.orderStatus === 'Cancelled' ? 'Order Cancelled' : 'Cancel Order' %>
    </button>
    <button class="btn-primary" onclick="generateInvoice('<%= order._id %>')">View Invoice</button>
</div>
            </div>
        </div>
    </div>
</div>

<!-- Return Modal -->
<div id="returnModal" class="return-modal">
    <div class="return-modal-content">
        <h3>Return Request</h3>
        <p>Please select a reason for return:</p>
        <div class="return-reasons">
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Defective Product"> Defective Product
            </label>
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Wrong Item"> Wrong Item Received
            </label>
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Size Issue"> Size doesn't fit
            </label>
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Quality Issue"> Quality not as expected
            </label>
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Changed Mind"> Changed my mind
            </label>
            <label class="return-reason">
                <input type="radio" name="returnReason" value="Other"> Other
            </label>
        </div>
        <div class="return-modal-buttons">
            <button class="btn-primary" onclick="closeReturnModal()">Cancel</button>
            <button class="btn-danger" onclick="submitReturn()">Submit Return</button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let currentReturnProductId = null;
    let currentReturnItemIndex = null;

    function openReturnModal(productId, itemIndex) {
        currentReturnProductId = productId;
        currentReturnItemIndex = itemIndex;
        document.getElementById('returnModal').style.display = 'flex';
    }

    function closeReturnModal() {
        document.getElementById('returnModal').style.display = 'none';
        currentReturnProductId = null;
        currentReturnItemIndex = null;
        // Clear radio buttons
        const radioButtons = document.querySelectorAll('input[name="returnReason"]');
        radioButtons.forEach(radio => radio.checked = false);
    }

    async function submitReturn() {
        const selectedReason = document.querySelector('input[name="returnReason"]:checked');
        
        if (!selectedReason) {
            Swal.fire({
                icon: 'warning',
                title: 'Please select a reason',
                text: 'Please select a reason for return',
                confirmButtonColor: '#e74c3c'
            });
            return;
        }

        try {
            const response = await fetch(`/orders/return-item`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: '<%= order._id %>',
                    productId: currentReturnProductId,
                    itemIndex: currentReturnItemIndex,
                    returnReason: selectedReason.value
                })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Return Request Submitted',
                    text: 'Your return request has been submitted successfully',
                    confirmButtonColor: '#e74c3c'
                }).then(() => {
                    // Update UI
                    document.getElementById(`item-status-${currentReturnItemIndex}`).textContent = 'Return Requested';
                    document.getElementById(`item-status-${currentReturnItemIndex}`).className = 'item-status status-return';
                    document.getElementById(`return-btn-${currentReturnItemIndex}`).disabled = true;
                    document.getElementById(`cancel-btn-${currentReturnItemIndex}`).disabled = true;
                    closeReturnModal();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to submit return request',
                    confirmButtonColor: '#e74c3c'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.',
                confirmButtonColor: '#e74c3c'
            });
        }
    }

   
    async function cancelItem(productId, itemIndex) {
    const result = await Swal.fire({
        title: 'Cancel Item?',
        text: 'Are you sure you want to cancel this item?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/orders/cancel-item`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId: '<%= order._id %>',
                    productId: productId,
                    itemIndex: itemIndex.toString() // Ensure it's a string
                })
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Item Cancelled',
                    text: 'The item has been cancelled successfully',
                    confirmButtonColor: '#e74c3c'
                }).then(() => {
                    // Update UI
                    const statusElement = document.getElementById(`item-status-${itemIndex}`);
                    const returnBtn = document.getElementById(`return-btn-${itemIndex}`);
                    const cancelBtn = document.getElementById(`cancel-btn-${itemIndex}`);
                    
                    if (statusElement) {
                        statusElement.textContent = 'Cancelled';
                        statusElement.className = 'item-status status-cancelled';
                    }
                    if (returnBtn) returnBtn.disabled = true;
                    if (cancelBtn) cancelBtn.disabled = true;
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to cancel item',
                    confirmButtonColor: '#e74c3c'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.',
                confirmButtonColor: '#e74c3c'
            });
        }
    }
}

   async function cancelEntireOrder(orderId) {
    const result = await Swal.fire({
        title: 'Cancel Entire Order?',
        text: 'Are you sure you want to cancel this entire order? This action cannot be undone.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#dc3545',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, cancel order!',
        cancelButtonText: 'No, keep order',
        reverseButtons: true
    });

    if (result.isConfirmed) {
        try {
            // Show loading state
            Swal.fire({
                title: 'Cancelling Order...',
                text: 'Please wait while we process your request',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            const response = await fetch(`/orders/${orderId}/cancel`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Cancelled!',
                    text: 'Your order has been cancelled successfully',
                    confirmButtonColor: '#28a745',
                    showDenyButton: true,
                    confirmButtonText: 'Continue Shopping',
                    denyButtonText: 'View Order Details'
                }).then((result) => {
                    if (result.isDenied) {
                        // Stay on the order details page but reload
                        location.reload();
                    } else {
                        // Redirect to products page or home
                        window.location.href = '/products';
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Cancellation Failed',
                    text: data.message || 'Failed to cancel order. Please try again.',
                    confirmButtonColor: '#e74c3c'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Network Error',
                text: 'Something went wrong. Please check your connection and try again.',
                confirmButtonColor: '#e74c3c'
            });
        }
    }
}

    async function generateInvoice() {
        // Show generating message
        Swal.fire({
            title: 'Generating Invoice...',
            text: 'Please wait while we prepare your invoice',
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });

        try {
            const response = await fetch(`/orders/<%= order._id %>/invoice`, {
                method: 'GET'
            });

            if (response.ok) {
                // Create blob from response
                const blob = await response.blob();
                
                // Create download link
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `invoice-<%= order.orderNumber || order._id %>.pdf`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                window.URL.revokeObjectURL(url);

                // Show success message
                Swal.fire({
                    icon: 'success',
                    title: 'Invoice Generated!',
                    text: 'Your invoice has been downloaded successfully',
                    confirmButtonColor: '#e74c3c'
                });
            } else {
                throw new Error('Failed to generate invoice');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to generate invoice. Please try again.',
                confirmButtonColor: '#e74c3c'
            });
        }
    }

    function logout() {
        Swal.fire({
            title: 'Logout?',
            text: 'Are you sure you want to logout?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#e74c3c',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, logout',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/logout';
            }
        });
    }

    // Close modal when clicking outside
    document.getElementById('returnModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeReturnModal();
        }
    });
</script>

<%- include("../partials/user/footer") %>