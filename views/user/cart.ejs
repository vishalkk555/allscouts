<%- include("../partials/user/header") %>

<body>
  <div class="cs_height_140nav cs_height_lg_80"></div>
  <!-- Start Cart Page Heading -->
  <section>
    <div class="container">
      <div class="cs_height_80cart cs_height_lg_60"></div>
      <div class="cs_shop_page_heading text-center">
        <h1 class="cs_fs_50 cs_bold">Shopping Cart</h1>
        <div class="cs_shop_breadcamp cs_medium">
          <a href="/">Home</a>
          <svg width="17" height="8" viewBox="0 0 17 8" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M16.3536 4.35355C16.5488 4.15829 16.5488 3.84171 16.3536 3.64645L13.1716 0.464467C12.9763 0.269205 12.6597 0.269205 12.4645 0.464467C12.2692 0.659729 12.2692 0.976312 12.4645 1.17157L15.2929 4L12.4645 6.82843C12.2692 7.02369 12.2692 7.34027 12.4645 7.53553C12.6597 7.7308 12.9763 7.7308 13.1716 7.53554L16.3536 4.35355ZM-4.37114e-08 4.5L16 4.5L16 3.5L4.37114e-08 3.5L-4.37114e-08 4.5Z" fill="#5E5E5E"/>
          </svg>            
          <span>Cart</span>
        </div>
      </div>
      <div class="cs_height_80 cs_height_lg_60"></div>
    </div>
  </section>
  <!-- End Cart Page Heading -->

  <!-- Start Cart -->
  <div class="container">
    <% if (cart && cart.item && cart.item.length > 0) { %>
    <div class="row">
      <div class="col-xl-8">
        <div class="table-responsive">
          <table class="cs_cart_table">
            <thead>
              <tr>
                <th>Product</th>
                <th>Price</th>
                <th>Quantity</th>
                <th>Subtotal</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% cart.item.forEach((item, index) => { %>
                <% 
                  let stockItem = item.productId.stock ? item.productId.stock.find(s => s.size === item.size) : null;
                  let availableStock = stockItem ? stockItem.quantity : 0;
                  let isOutOfStock = !stockItem || availableStock <= 0;
                  let isBlocked = item.productId.isBlocked || (item.productId.category && item.productId.category.isBlocked);
                %>
                <tr class="cart-item <%= (isOutOfStock || isBlocked) ? 'out-of-stock' : '' %>" data-item-id="<%= item._id %>">
                  <td>
                    <div class="cs_cart_table_media">
                      <img src="/uploads/products/<%= item.productId.productImage[0] %>" 
                           alt="<%= item.productId.productName %>">
                      <div>
                        <a href="/product/<%= item.productId._id %>">
                          <h3><%= item.productId.productName %></h3>
                        </a>
                        <p class="mb-1"><strong>Size:</strong> <%= item.size %></p>
                        <span class="stock-status 
                          <%= isBlocked ? 'blocked' : (isOutOfStock ? 'out-of-stock' : (availableStock <= 5 ? 'low-stock' : 'in-stock')) %>">
                          <%= isBlocked ? 'Blocked' : (isOutOfStock ? 'Out of Stock' : (availableStock <= 5 ? `Only ${availableStock} left` : 'In Stock')) %>
                        </span>
                      </div>
                    </div>
                  </td>
                  <td>
                    <% if (item.offerPrice && item.offerPrice < item.price) { %>
                      <span style="text-decoration: line-through; color: #999; margin-right: 10px;">₹<%= item.price.toFixed(2) %></span>
                      <span>₹<%= item.offerPrice.toFixed(2) %></span>
                    <% } else { %>
                      ₹<%= item.price.toFixed(2) %>
                    <% } %>
                  </td>
                  <td>
                    <div class="cart_quantity">
                      <button class="cart_quantity_btn cart_decrement" 
                              data-item-id="<%= item._id %>" 
                              data-action="decrement"
                              <%= (isOutOfStock || isBlocked || item.quantity <= 1) ? 'disabled' : '' %>>
                        <i class="fa-solid fa-angle-down"></i>
                      </button>
                      <span class="cart_quantity_input"><%= item.quantity %></span>
                      <button class="cart_quantity_btn cart_increment" 
                              data-item-id="<%= item._id %>" 
                              data-action="increment"
                              data-max-stock="<%= availableStock %>"
                              <%= (isOutOfStock || isBlocked || item.quantity >= availableStock) ? 'disabled' : '' %>>
                        <i class="fa-solid fa-angle-up"></i>
                      </button>
                    </div>
                  </td>
                  <td class="item-subtotal">₹<%= item.total.toFixed(2) %></td>
                  <td class="text-center">
                    <button class="cs_cart-table-close remove-item" data-item-id="<%= item._id %>">
                      <i class="fa-solid fa-xmark"></i>
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
        <div class="cs_height_30 cs_height_lg_30"></div>
      </div>
      
      <div class="col-xl-4">
        <div class="cs_shop-side-spacing">
          <div class="cs_shop-card">
            <div class="cs_height_30 cs_height_lg_30"></div>
            <h2 class="cs_fs_21 cs_medium">Cart Totals</h2>
            <table class="cs_medium">
              <tbody>
                <tr>
                  <td>Subtotal</td>
                  <td class="text-end cart-subtotal">₹<%= cart.cartTotal ? cart.cartTotal.toFixed(2) : '0.00' %></td>
                </tr>
                <tr>
                  <td><strong>Total</strong></td>
                  <td class="text-end cart-total">₹ <%= cart.cartTotal ? cart.cartTotal.toFixed(2) : '0.00' %></td>
                </tr>
              </tbody>
            </table>
            <div class="cs_height_30 cs_height_lg_30"></div>
            
        <% 
  let hasOutOfStockItems = cart.item.some(item => {
    let stockItem = item.productId.stock ? item.productId.stock.find(s => s.size === item.size) : null;
    let availableStock = stockItem ? stockItem.quantity : 0;
    return !stockItem || availableStock <= 0;
  });

  let hasBlockedItems = cart.item.some(item => item.productId.isBlocked || (item.productId.category && item.productId.category.isBlocked));
%>

<% if (hasOutOfStockItems) { %>
  <button class="cs_btn cs_style_1 cs_fs_16 cs_medium w-100" disabled style="opacity: 0.6; cursor: not-allowed;">
    Cannot Proceed - Out of Stock Items
  </button>
  <p class="text-center mt-2" style="font-size: 12px; color: #dc3545;">
    Remove out of stock items to continue
  </p>
<% } else if (hasBlockedItems) { %>
  <button class="cs_btn cs_style_1 cs_fs_16 cs_medium w-100" disabled style="opacity: 0.6; cursor: not-allowed;">
    Cannot Proceed - Blocked Items
  </button>
  <p class="text-center mt-2" style="font-size: 12px; color: #dc3545;">
    Remove blocked items to continue
  </p>
<% } else { %>
  <a href="/checkout" class="cs_btn cs_style_1 cs_fs_16 cs_medium w-100">Proceed To Checkout</a>
<% } %>

            
            <a href="/shop" class="cs_continue_shopping">Continue Shopping</a>
          </div>
          <div class="cs_height_30 cs_height_lg_30"></div>
        </div>
      </div>
    </div>
    
    <% } else { %>
    <!-- Empty Cart -->
    <div class="row">
      <div class="col-12">
        <div class="empty-cart">
          <div class="empty-cart-icon">
            <i class="fa-solid fa-shopping-cart"></i>
          </div>
          <h3>Your cart is empty</h3>
          <p>Looks like you haven't added any items to your cart yet.</p>
          <a href="/shop" class="cs_btn cs_style_1 cs_fs_16 cs_medium">Start Shopping</a>
        </div>
      </div>
    </div>
    <% } %>
  </div>
  <!-- End Cart -->

  <div class="cs_height_110 cs_height_lg_50"></div>

  <!-- SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const quantityButtons = document.querySelectorAll('.cart_quantity_btn');
      const removeButtons = document.querySelectorAll('.remove-item');

     quantityButtons.forEach(button => {
  button.addEventListener('click', function() {
    if (this.disabled) return;

    const itemId = this.dataset.itemId;
    const action = this.dataset.action;
    const maxStock = parseInt(this.dataset.maxStock) || 0;
    const currentQuantity = parseInt(this.closest('.cart_quantity').querySelector('.cart_quantity_input').textContent);

    const MAX_QTY = 5; // Maximum allowed per product

    if (action === 'increment') {
      if (currentQuantity >= maxStock) {
        Swal.fire({
          title: 'Maximum Stock Reached',
          text: 'No more stock available for this product',
          icon: 'warning',
          confirmButtonText: 'OK'
        });
        return;
      }
      if (currentQuantity >= MAX_QTY) {
        Swal.fire({
          title: 'Maximum Quantity Reached',
          text: `You can only add up to ${MAX_QTY} units of this product`,
          icon: 'warning',
          confirmButtonText: 'OK'
        });
        return;
      }
    }

    updateCartQuantity(itemId, action);
  });
});


      removeButtons.forEach(button => {
        button.addEventListener('click', function() {
          const itemId = this.dataset.itemId;
          Swal.fire({
            title: 'Remove Item',
            text: 'Are you sure you want to remove this item?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, remove it!'
          }).then((result) => {
            if (result.isConfirmed) {
              removeCartItem(itemId);
            }
          });
        });
      });

      function updateCartQuantity(itemId, action) {
        fetch('/updateQuantity', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ itemId, action })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) location.reload();
          else Swal.fire({ title: 'Error', text: data.message || 'Failed to update', icon: 'error' });
        });
      }

      function removeCartItem(itemId) {
        fetch('/removeItem', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ itemId })
        })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({ title: 'Removed!', text: 'Item removed.', icon: 'success', timer: 1500, showConfirmButton: false })
              .then(() => location.reload());
          } else {
            Swal.fire({ title: 'Error', text: data.message || 'Failed to remove item', icon: 'error' });
          }
        });
      }
    });
  </script>

<%- include('../partials/user/footer') %>
